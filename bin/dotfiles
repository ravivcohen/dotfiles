#!/bin/bash


echo 'Dotfiles - Raviv Cohen'


for var in "$@"
do
    if [[ "$var" == "-h" || "$var" == "--help" ]]; then cat <<HELP
      Usage: $(basename "$0") [-f | -h]

      -h / --help run help
      -f / --force-reinstall force to re-run and re-install all dotfiles
      -s / --skip-update force skip updating or checking status of dotfiles

      See the README for documentation.
      https://github.com/ravivcohen/dotfiles
HELP
exit

  elif [[ "$var" == "-f" || "$var" == "--force-reinstall" ]]; then
    export new_dotfiles_install=1

  elif [[ "$var" == "-s" || "$var" == "--skip-update" ]]; then
    export skip_update=1
  fi

done

#Setup the DOTFILES_HOME variable to be the current users home.
#This is needed when running something as STD user.
export DOTFILES_HOME=$HOME


if [[ ! -d ~/.dotfiles ]]; then
  export lib_file=/tmp/lib_file$$.$RANDOM
  curl -fsSL https://raw.githubusercontent.com/ravivcohen/dotfiles/master/libs/helper_functions.sh -o $lib_file
else
  export lib_file=$HOME/.dotfiles/libs/helper_functions.sh
fi

#All Helper functions can now be found inside libs/helper_functions.
. $lib_file

## TODO: Move this into a get_os functions that is smart return var right away if already set
# OSX
if [[ "$OSTYPE" =~ ^darwin ]]; then
  export OS="osx" 
# Ubuntu.
elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]; then
  export OS="ubuntu"
# Arch
elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Arch ]]; then
  export OS="arch"
fi

is_standard_user=false
if [[ "$OS" == "osx"  && $(groups | grep -q -e '\badmin\b')$? -ne 0 ]]; then
    echo "Script is running as a standard user."
    is_standard_user=true
fi    

check_sudo

# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if [[ "$OS" = "osx" && $(xcode-select -p 2>&1) == "/Applications/Xcode.app/Contents/Developer"  ]]; then
  export xcode_installed=true
fi

#Ensure command line tools are installed 
if [[ "$OS" = "osx" ]]; then
  check_cmd_tools
fi

#sleep 10

if [[ -e "$HOME/.profile" ]]; then
  e_header "Removing .profile"
  rm -rf "$HOME/.profile"
fi

# If Git is not installed, install it (Ubuntu only, since Git comes standard
# with recent XCode or CLT)
if [[ ! "$(type -P git)" && "$OS" == "ubuntu" ]]; then
  e_header "Installing Git"
  sudo apt-get -qq install git-core
elif [[ ! "$(type -P git)" && "$OS" == "arch" ]]; then
  e_header "Installing Git"
  sudo pacman --noc -S git
fi

# If Git isn't installed by now, something exploded. We gots to quit!
if [[ ! "$(type -P git)" ]]; then
  e_error "Git should be installed. It isn't. Aborting."
  exit 1
fi

## Check if .dotfiles exist
if [[ ! -d ~/.dotfiles ]]; then
  export new_dotfiles_install=1
  # ~/.dotfiles doesn't exist? Clone it!
  e_header "Downloading dotfiles"
  git clone git://github.com/ravivcohen/dotfiles.git ~/.dotfiles
  cd ~/.dotfiles
else
    if [[ -z "$skip_update"  ]]; then
      cd ~/.dotfiles
      # Check if dotfiles dirty
      git update-index -q --refresh
      git diff-index --quiet HEAD
      if [[ $? -eq 0 ]] && [[ -z "$(git ls-files --exclude-standard --others)" ]]; then
        # Update remote info
        git remote update >&-
        # Check if the dotfiles dir is out-of-date
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse @{u})
      
        if [ $LOCAL = $REMOTE ]; then
            e_header "Dotfiles are up-to-date"
            exit 1
        elif [ $LOCAL = $(git merge-base @ @{u}) ]; then
            e_header "Updating dotfiles"
            git pull
        else
            e_error "Dotfiles out-of-sync"
            git status
            exit 1
        fi

      else
        e_error "Dotfiles are dirty"
        git status
        exit 1
      fi

    fi
fi

# Add binaries into the path
PATH=~/.dotfiles/bin:$PATH
export PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob


# Create caches directory, if it doesn't already exist.
#mkdir -p "$HOME/.dotfiles/caches"

# If backups are needed, this is where they'll go.
backup_dir="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

e_header "Running Init"
do_stuff "init"


# 2. Copy and Link Over Files 
do_stuff "copy"
do_stuff "link"

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Lest I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "conf/firsttime_reminder.sh" ]]; then
  e_header "First-Time Reminders"
  source "conf/firsttime_reminder.sh"
fi

# All done!
e_header "All done!"
