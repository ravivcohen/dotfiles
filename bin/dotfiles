#!/bin/bash

echo 'Dotfiles - Raviv Cohen'

if [[ "$1" == "-h" || "$1" == "--help" ]]; then cat <<HELP

Usage: $(basename "$0") [-f | -h]

-h / --help run help
-f / --force-reinstall force to re-run and re-install all dotfiles

See the README for documentation.
https://github.com/ravivcohen/dotfiles

HELP
exit;
elif [[ "$1" == "-f" || "$1" == "--force-reinstall" ]]; then
  export new_dotfiles_install=1
fi

#Setup the DOTFILES_HOME variable to be the current users home.
#This is needed when running something as STD user.
export DOTFILES_HOME=$HOME

#
if [[ ! -d ~/.dotfiles ]]; then
  export lib_file=/tmp/lib_file$$.$RANDOM
  curl -fsSL https://raw.githubusercontent.com/ravivcohen/dotfiles/master/libs/helper_functions.sh -o $lib_file
else
  export lib_file=$HOME/.dotfiles/libs/helper_functions.sh
fi

#All Helper functions can now be found inside libs/helper_functions.
. $lib_file


# Keep-alive: update existing `dosu` time stamp until `.osx` has finished
if [ "$is_standard_user" = false ]; then
  while true; do dosu -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
fi

# Ensure that we can actually, like, compile anything.
if [[ ! "$(type -P gcc)" && "$OSTYPE" =~ ^darwin ]]; then
  e_error "The XCode Command Line Tools must be installed first."
fi

# If Git is not installed...
if [[ ! "$(type -P git)" ]]; then
  # OSX
  if [[ "$OSTYPE" =~ ^darwin ]]; then
    # Since apple dropped support fot 10.6 and 10.7 is next.
    # I assusme you already have git installed its default on 10.8 +
    e_error "No GIT ? supported osx 10.8 +"
    exit 1
  # Ubuntu.
  elif [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]; then
    # Git is fairly easy.
    e_header "Installing Git"
    dosu apt-get -qq install git-core
  fi
fi

# If Git isn't installed by now, something exploded. We gots to quit!
if [[ ! "$(type -P git)" ]]; then
  e_error "Git should be installed. It isn't. Aborting."
  exit 1
fi

## Check if .dotfiles exist
if [[ ! -d ~/.dotfiles ]]; then
  export new_dotfiles_install=1
  # ~/.dotfiles doesn't exist? Clone it!
  e_header "Downloading dotfiles"
  git clone git://github.com/ravivcohen/dotfiles.git ~/.dotfiles
  cd ~/.dotfiles
else
    cd ~/.dotfiles
    # Check if dotfiles dirty
    git update-index -q --refresh
    git diff-index --quiet HEAD
    if [[ $? -eq 0 ]] && [[ -z "$(git ls-files --exclude-standard --others)" ]]; then
      # Update remote info
      git remote update >&-
      # Check if the dotfiles dir is out-of-date
      LOCAL=$(git rev-parse @)
      REMOTE=$(git rev-parse @{u})
    
      if [ $LOCAL = $REMOTE ]; then
          e_header "Dotfiles are up-to-date"
          e_header "Skip Script Will Exit"
          if no-skip; then
            exit 0
          fi
      elif [ $LOCAL = $(git merge-base @ @{u}) ]; then
          e_header "Updating dotfiles"
          git pull
      else
          e_error "Dotfiles out-of-sync"
          git status
          exit 1
      fi

    else
      e_error "Dotfiles are dirty"
      git status
      exit 1
   fi
fi

# Add binaries into the path
PATH=~/.dotfiles/bin:$PATH
export PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob


# Create caches directory, if it doesn't already exist.
#mkdir -p "$HOME/.dotfiles/caches"

# If backups are needed, this is where they'll go.
backup_dir="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"
backup=

e_header "Skip Init ? (requires sudo access)"
if ! skip; then
  # do_stuff Executes code for each file in these subdirectories.
  # 1. First We Init the system
  # 
  while true; do
    read -p "Do you need to login as another user who can sudo (y/n) ?: " yn
    case $yn in
      [Yy]* ) 
        is_standard_user=true
        read -p "Enter the Username to use: " username
        echo "Please enter password for $username"
        check_std_user_sudo_access
        #since we have the enitre file and it might contain the orginal
        #dosu warining menu we look for root anywhere in the file.
        if [[ $test_root_access != *root* ]]; then
          echo "Sorry, you need root to run parts of this script exiting."
          exit 1
        fi
        break
        ;;

      [Nn]* ) 
        is_standard_user=false
        echo "Testing Sudo Acess:"
        if [[ $(dosu whoami) != "root" ]]; then
          echo "Sorry, you need root to run parts of this script exiting."
          exit 1
        fi
        break
        ;;

      * ) echo "Do you wish to login as an administrator (y/n) ?:";;
    esac
  done
  # Now Actually do stuff
  do_stuff "init"
fi


e_header "Skip Copy/Link ?"
if ! skip; then
  # 2. Copy and Link Over Files 
  do_stuff "copy"
  do_stuff "link"
fi

# Alert if backups were made.
if [[ "$backup" ]]; then
  echo -e "\nBackups were moved to ~/${backup_dir#$HOME/}"
fi

# Lest I forget to do a few additional things...
if [[ "$new_dotfiles_install" && -e "conf/firsttime_reminder.sh" ]]; then
  e_header "First-Time Reminders"
  source "conf/firsttime_reminder.sh"
fi

# All done!
e_header "All done!"
